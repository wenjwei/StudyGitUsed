using System;
using UnityEngine;
using System.Collections.Generic;

namespace com.tencent.pandora
{
    public class Logger : MonoBehaviour
    {
        /*
         logTag:PxUI、SDK、Internal、Undefined、其他
         */
        public const int ERROR = 0;
        public const int WARNING = 1;
        public const int INFO = 2;
        public const int DEBUG = 3;

        public static Action<string, string, int> HandleLog;

        public static bool Enable = true;
        public static int LogLevel = ERROR;

        private static bool _configedByCGI = false;
        private static string _cgiVersion = string.Empty;
        private static Dictionary<string, LogConfig> _logConfigDict;
        private static bool _fullLogOutput = false;
        private static bool _isDebugByInternal = true;
        private static bool _isDebugByUniform = true;
        private static int _logLevelByInternal = ERROR;
        private static int _logLevelByUniform = ERROR;

        private static int _originLevel;
        private static bool _originEnable;

        public static void Log(string message, string tag = "Undefined")
        {
            OutputLog(message, DEBUG, tag);
        }

        public static void LogInfo(string message, string tag = "Undefined")
        {
            OutputLog(message, INFO, tag);
        }

        public static void LogWarning(string message, string tag = "Undefined")
        {
            OutputLog(message, WARNING, tag);
        }

        public static void LogError(string message, string tag = "Undefined")
        {
            OutputLog(message, ERROR, tag);
        }

        private static void OutputLog(string message, int level, string tag)
        {
            if (tag == null)
            {
                return;
            }
            SetLogState(tag);
            if (!Enable)
            {
                return;
            }
            message = string.Format("<b>[Pandora]</b> [{0}] {1}", tag, message);
            string stackTrace = string.Empty;
            if (_fullLogOutput || level < INFO)
            {
                stackTrace = StackTraceUtility.ExtractStackTrace();
            }

            switch (level)
            {
                case DEBUG:
                    if (LogLevel >= DEBUG)
                    {
                        Debug.Log(message);
                        CustomOutputLog(message, stackTrace, level);
                    }
                    break;
                case INFO:
                    if (LogLevel >= INFO)
                    {
                        Debug.Log(message);
                        CustomOutputLog(message, stackTrace, level);
                    }
                    break;
                case WARNING:
                    if (LogLevel >= WARNING)
                    {
                        Debug.LogWarning(message);
                        CustomOutputLog(message, stackTrace, level);
                    }
                    break;
                case ERROR:
                    if (LogLevel >= ERROR)
                    {
                        Debug.LogWarning(message);
                        CustomOutputLog(message, stackTrace, level);
                    }
                    break;
                default:
                    break;
            }

            RestoreLogState();
        }

        private static void SetLogState(string tag)
        {
            _originEnable = Enable;
            _originLevel = LogLevel;
            //未获取到cgi配置或内部平台时走默认配置
            if (!_configedByCGI || _cgiVersion == "Internal")
            {
                return;
            }

            if (_cgiVersion == "Uniform")
            {
                if (_fullLogOutput)
                {
                    Enable = true;
                    LogLevel = DEBUG;
                    return;
                }

                if (tag == "Internal" )
                {
                    Enable = _isDebugByInternal;
                    LogLevel = _logLevelByInternal;
                    return;
                }

                if (tag == "SDK" || tag == "PxUI" || tag == "Undefined")
                {
                    Enable = _isDebugByUniform;
                    LogLevel = _logLevelByUniform;
                    return;
                }

                if (_logConfigDict.ContainsKey(tag))
                {
                    Enable = _logConfigDict[tag].isDebug;
                    LogLevel = _logConfigDict[tag].logLevel;
                }
                else
                {
                    Enable = false;
                    LogLevel = ERROR;
                }
            }
        }

        private static void RestoreLogState()
        {
            Enable = _originEnable;
            LogLevel = _originLevel;
        }

        private static void CustomOutputLog(string message, string stackTrace, int level)
        {
            if (HandleLog != null)
            {
                HandleLog(message, stackTrace, level);
            }
        }

        public static void SetLogConfig(Dictionary<string, LogConfig> logConfigDict, bool fullLogOutput, string cgiVersion, bool isDebugByInternal, int logLevelByInternal, bool isDebugByUniform, int logLevelByUniform)
        {
            _configedByCGI = true;
            _logConfigDict = logConfigDict;
            _fullLogOutput = fullLogOutput;
            _cgiVersion = cgiVersion;
            _isDebugByInternal = isDebugByInternal;
            _logLevelByInternal = logLevelByInternal;
            _isDebugByUniform = isDebugByUniform;
            _logLevelByUniform = logLevelByUniform;
            if (_cgiVersion == "Internal")
            {
                Enable = _isDebugByInternal;
                LogLevel = _logLevelByInternal;
                return;
            }

            if (_cgiVersion == "Uniform")
            {
                Enable = _isDebugByUniform;
                LogLevel = _logLevelByUniform;
                return;
            }
        }

        //logout后要清理下配置
        public static void Dispose()
        {
            _configedByCGI = false;
            _logConfigDict = null;
            _fullLogOutput = false;
            _cgiVersion = string.Empty;
            _isDebugByInternal = true;
            _logLevelByInternal = ERROR;
            _isDebugByUniform = true;
            _logLevelByUniform = ERROR;
        }
    }

    public class LogConfig
    {
        public string tag;
        public bool isDebug = false;
        public int logLevel = 0;
    }
}

